import os
from typing import List, Dict, Any, Optional
import aiohttp
from dataclasses import dataclass

@dataclass
class LLMConfig:
    model: str
    temperature: float = 0.7
    max_tokens: int = 512
    top_p: float = 1.0
    frequency_penalty: float = 0.0
    presence_penalty: float = 0.0
    stop: Optional[List[str]] = None

class LLMConnector:
    def __init__(self, api_key: str, base_url: str, config: LLMConfig):
        self.api_key = api_key
        self.base_url = base_url
        self.config = config

    async def connect(self, messages: List[Dict[str, str]]) -> str:
        async with aiohttp.ClientSession() as session:
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {self.api_key}"
            }
            payload = {
                "model": self.config.model,
                "messages": messages,
                "temperature": self.config.temperature,
                "max_tokens": self.config.max_tokens,
                "top_p": self.config.top_p,
                "frequency_penalty": self.config.frequency_penalty,
                "presence_penalty": self.config.presence_penalty,
                "stop": self.config.stop
            }

            async with session.post(f"{self.base_url}/chat/completions", headers=headers, json=payload) as response:
                if response.status == 200:
                    data = await response.json()
                    return data['choices'][0]['message']['content']
                else:
                    error_message = await response.text()
                    raise Exception(f"API request failed with status {response.status}: {error_message}")

    @classmethod
    def from_env(cls, config: LLMConfig):
        api_key = os.getenv("OPENAI_API_KEY")
        base_url = os.getenv("OPENAI_API_BASE", "https://api.openai.com/v1")
        if not api_key:
            raise ValueError("OPENAI_API_KEY environment variable is not set")
        return cls(api_key, base_url, config)